service:
  name: serverless-course-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
provider:
  name: aws

  tracing:
    lambda: true
    apiGateway: true
    iamRoleStatements:
      - Effect: "Allow" # xray permissions (required)
        Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
        Resource:
        - "*"
      
      


  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}


  environment:
    COURSES_TABLE: Courses-${self:provider.stage}
    COURSES_ID_INDEX: CoursesIdIndex
    COURSES_S3_BUCKET: courses-s3-islam2-${self:provider.stage}
    TOPICS_TABLE: Topics-${self:provider.stage}
    TOPICS_ID_INDEX: TopicsIdIndex
    TOPICS_S3_BUCKET: topics-s3-islam-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET_ID: Auth0CourseSecret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret


  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'

    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn    


custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Courses API
        description: Serverless application for managing courses
    models:
      - name: CreateCourseRequest
        contentType: application/json
        schema: ${file(models/create-course-request.json)}
      - name: UpdateCourseRequest
        contentType: application/json
        schema: ${file(models/update-course-request.json)}
      - name: CreateTopicRequest
        contentType: application/json
        schema: ${file(models/create-topic-request.json)}
      - name: UpdateTopicRequest
        contentType: application/json
        schema: ${file(models/update-topic-request.json)}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetCourses:
    handler: src/lambda/http/courses/getCourses.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}
    events:
      - http:
          method: get
          path: courses
          cors: true
          authorizer: Auth
          documentation:
            summary: Get Courses
            description: Get the list of courses for the current user

  CreateCourse:
    handler: src/lambda/http/courses/createCourse.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}
    events:
      - http:
          method: post
          path: courses
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new course
            description: Create a new course
            requestModels:
              'application/json': CreateCourseRequest

  UpdateCourse:
    handler: src/lambda/http/courses/updateCourse.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_ID_INDEX}
    events:
      - http:
          method: put
          path: courses/{courseId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update Course
            description: Update a Course by its id
            requestModels:
              'application/json': UpdateCourseRequest

  DeleteCourse:
    handler: src/lambda/http/courses/deleteCourse.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_ID_INDEX}

      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}

      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.COURSES_S3_BUCKET}/*
    events:
      - http:
          method: delete
          path: courses/{courseId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete A course
            description: Delete A course

  CourseUploadUrl:
    handler: src/lambda/http/courses/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.COURSES_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: courses/{courseId}/attachment
          cors: true
          authorizer: Auth
          documentation:
            summary: Get a url to upload course image
            description: Get a url to upload course image


  GetTopics:
    handler: src/lambda/http/topics/getTopics.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.TOPICS_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}
    events:
      - http:
          method: get
          path: courses/{courseId}/topics
          cors: true
          authorizer: Auth
          documentation:
            summary: Get Topics
            description: Get the list of Topics for a course

  CreateTopic:
    handler: src/lambda/http/topics/createTopic.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}
    events:
      - http:
          method: post
          path: courses/{courseId}/topics
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new topic
            description: Create a new topic for a course
            requestModels:
              'application/json': CreateTopicRequest

  UpdateTopic:
    handler: src/lambda/http/topics/updateTopic.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}/index/${self:provider.environment.TOPICS_ID_INDEX}
    events:
      - http:
          method: put
          path: courses/{courseId}/topics/{topicId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update Topic
            description: Update a Topic by its id
            requestModels:
              'application/json': UpdateTopicRequest

  DeleteTopic:
    handler: src/lambda/http/topics/deleteTopic.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TOPICS_TABLE}/index/${self:provider.environment.TOPICS_ID_INDEX}

      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.TOPICS_S3_BUCKET}/*
    events:
      - http:
          method: delete
          path: courses/{courseId}/topics/{topicId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete A topic
            description: Delete A topic

  TopicUploadUrl:
    handler: src/lambda/http/topics/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.TOPICS_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: courses/{courseId}/topics/{topicId}/attachment
          cors: true
          authorizer: Auth
          documentation:
            summary: Get a url to upload topic video
            description: Get a url to upload topic video
          
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    CourseDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S

        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COURSES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COURSES_ID_INDEX}
            KeySchema:
            - AttributeName: courseId
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    TopicDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: topicId
            AttributeType: S
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S

        KeySchema:
          - AttributeName: courseId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TOPICS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TOPICS_ID_INDEX}
            KeySchema:
            - AttributeName: topicId
              KeyType: HASH
            Projection:
              ProjectionType: ALL


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false


    CourseAttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.COURSES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000


    CourseBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.COURSES_S3_BUCKET}/*'
        Bucket: !Ref CourseAttachmentsBucket



    TopicAttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TOPICS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000


    # TopicBucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     PolicyDocument:
    #       Id: MyPolicy
    #       Version: "2012-10-17"
    #       Statement:
    #         - Sid: PublicReadForGetBucketObjects
    #           Effect: Allow
    #           Principal: '*'
    #           Action: 's3:GetObject'
    #           Resource: 'arn:aws:s3:::${self:provider.environment.TOPICS_S3_BUCKET}/*'
    #     Bucket: !Ref TopicAttachmentsBucket
    
    
    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0CourseKey-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey
    
    


